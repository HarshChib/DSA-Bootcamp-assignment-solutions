class Solution {
    public boolean search(int[] arr, int target) {
       int pivot=pivot(arr,0,arr.length-1);
        if(pivot==-1){
           return binarySearch(arr,target,0,arr.length-1);
        }
        if(target>=arr[0])
            return binarySearch(arr,target,0,pivot);
        else 
           return binarySearch(arr,target,pivot+1,arr.length-1);
        
        }
     static boolean binarySearch(int[] arr, int target, int start, int end) {
        while(start <= end) {
            // find the middle element
//            int mid = (start + end) / 2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                // ans found
                return true;
            }
        }
        return false;
    }
    
    static int pivot(int []arr,int low,int high){
        while(low<=high){
            int mid=low+(high-low)/2;
            if(mid>low&&arr[mid]<arr[mid-1])
                return mid-1;
             if(mid<high&&arr[mid]>arr[mid+1]){
                return mid;
            }
             if(arr[low]==arr[mid]&&arr[mid]==arr[high])
            {
                 if(low<high&&arr[low]>arr[low+1])
                     return low;
                low++;
                 if(high>low&&arr[high]<arr[high-1])
                     return high-1;
                high--;
            }
            else if(arr[low]<=arr[mid]||(arr[low]==arr[mid])&&arr[mid]>arr[high]){
                low=mid+1;
            }
            else 
                high=mid-1;
    }
        return -1;
    }

}