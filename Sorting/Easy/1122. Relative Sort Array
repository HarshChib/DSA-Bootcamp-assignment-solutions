class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
         int freq[]=new int[1000+1];
        int n1=arr1.length;
        int n2=arr2.length;
        int sorted[]=new int[n1];
        for(int i=0;i<n1;i++){
            freq[arr1[i]]++;
        }int x=0;
        for(int i=0;i<n2;i++){
            int count=freq[arr2[i]];
            while(count-->0){
                sorted[x++]=arr2[i];
            }
            
           
        }
        Set<Integer> set=new HashSet<Integer>();
        for(int i:arr2){
            set.add(i);
        }
        Arrays.sort(arr1);
        for(int i=0;i<n1;i++){
            if(!(set.contains(arr1[i]))){
              int count=freq[arr1[i]];
            while(count-->0){
                sorted[x++]=arr1[i];
            }
                set.add(arr1[i]);
            }
        }
        return sorted;
    
    }
}
///
without extra space
class Solution 
{
    public int[] relativeSortArray(int[] arr1, int[] arr2) 
    {
        // size of the arrays
        int n1 = arr1.length;
        int n2 = arr2.length;
        
        // pointer to sort arr1
        int point = 0;
        
        // traverse in arr2 to get each element and sort according to that
        for(int i=0; i<n2; i++)
        {
            // find current value inside arr1 and put on a right place
            point = findSort(arr2[i],arr1,point,n1); 
        }
        
        // sort the arr1 so non-present element come in ascending order at last
        Arrays.sort(arr1,point,n1);
        
        return arr1;
    }
    
    int findSort(int val,int[] arr,int k,int size)
    {
        for(int i=k; i<size; i++)
        {
            if(arr[i] == val)
            {
                swap(i,k,arr);
                k++;
            }
        }
        return k;
    }
    
    void swap(int ind1, int ind2, int[] arr)
    {
        int temp = arr[ind1];
        arr[ind1] = arr[ind2];
        arr[ind2] = temp;
    }
}


here we are swapping the the matchuing values  of arr2
k pointer is pointing at wrong index and i is searching for right element once finnd we swap adn so on
till we sort relative to arr2