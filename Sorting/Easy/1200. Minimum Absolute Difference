class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
        Arrays.sort(arr);
        List<List<Integer>> res =new ArrayList<>();
        int min=Integer.MAX_VALUE;
        for(int i=0;i<arr.length-1;i++){
            min=Math.min(min,(arr[i+1]-arr[i]));
        }
        for(int i=0;i<arr.length-1;i++){
            if(arr[i+1]-arr[i]==min){
                
                res.add(Arrays.asList(arr[i],arr[i+1]));
            }
        }
        return res;
    }
}//


///////////////
class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
       List<List<Integer>> result = new ArrayList<>();
        int min = Integer.MAX_VALUE;
        
        Arrays.sort(arr); 
        for (int i = 0; i < arr.length-1; i++)
        {
            int diff = arr[i+1]-arr[i];
            if (diff > min)
            {
                continue;
            }
            else if (diff < min)
            {
                result.clear();
                min = diff;
            }
            List<Integer> pair = new ArrayList<>();
            pair.add(arr[i]);
            pair.add(arr[i+1]);
            result.add(pair);
        }
        return result;

    }
}

checking for new min difference and clearing the previous results becuase they didnt gave us the current min difference 
and checking for all the next pairs for either more minimum or pairs with this min difference