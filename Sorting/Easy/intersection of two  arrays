class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
         Set<Integer> res = new HashSet<Integer>();
       
        if(nums1.length<nums2.length){
           Arrays.sort(nums2);
            for(int i=0;i<nums1.length;i++){
                int ele=binarySearch(nums2,nums1[i]);
                if(ele!=-1)
                    res.add(nums2[ele]);
                
            }
        }
        else{
            Arrays.sort(nums1);
            for(int i=0;i<nums2.length;i++){
                int ele=binarySearch(nums1,nums2[i]);
                if(ele!=-1)
                    res.add(nums1[ele]);
            } 
        }
        int ans[]=new int[res.size()];
        int i = 0;
        for(int x:res){
            ans[i++]=x;
        }
        return ans;
    }
     static int binarySearch(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;

        while(start <= end) {
            // find the middle element
//            int mid = (start + end) / 2; // might be possible that (start + end) exceeds the range of int in java
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
                // ans found
                return mid;
            }
        }
        return -1;
    }
    
}