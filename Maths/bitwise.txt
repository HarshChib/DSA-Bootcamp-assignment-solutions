public class bitwise{
	public static void main(String f[]) {
//		System.out.println(magic(22));
//		System.out.println("Sum of nth row of pascal is n-1"+(1<<(4)));
//		System.out.println("power of 2 : " + isPowerOf2(16));
//		System.out.println("X power Y : " + pow(4, 2));
//		System.out.println("Unique element"+unique(new int[] {1, 1, 1, 2, 3, 3, 3, 4, 4, 4},3));
//		System.out.println("Number of set bits : "+bits(12));
//		System.out.println("Number of digits in Representation : "+digits(5,2));
//		System.out.println("xor 0 to a : ");
//		xor(10);
//		System.out.println("xor from a to b is : " + xor2(3, 9));

	}

	/* program to find xor of numbers in given range */
	private static int xor2(int i, int j) {
		return helper(j) ^ helper(i - 1);
	}

	/* program to find xor of 0-n numbers */
	static int helper(int i) {
		int ans = i % 4;
		if (ans == 0)
			return i;
		else if (ans == 1)
			return 1;
		else if (ans == 2)
			return i + 1;
		else
			return 0;
	}

	/* program to find no of digits */
	private static int digits(int n, int base) {
		// TODO Auto-generated method stub
		return (int) (Math.log(n) / Math.log(base)) + 1;
	}

	/* program to find number of bits */
	private static int bits(int n) {
		int count = 0;
//		while(n>0) {
//			if((n&1)==1)
//				count++;
//			n>>=1;
//		}
		while (n > 0) {
			count++;
			n -= (n & -n);
		}
		return count;
	}

	/* program to find unique in n no of duplicates */
	private static int unique(int[] arr, int rTime) {
		int n = arr.length;
		int temp[] = new int[n];
		for (int i = 0; i < n; i++) {
			String s = Integer.toBinaryString(arr[i]);
			int j = n - 1;
			int x = s.length() - 1;
			while (x >= 0) {
				if (s.charAt(x--) == '0')
					temp[j--] += 0;
				else
					temp[j--] += 1;
			}
		}
		String s = "";
		for (int i = 0; i < temp.length; i++) {
			temp[i] %= rTime;
			s += temp[i];
		}
		return Integer.parseInt(s, 2);
	}

	/* program to find X to power Y */
	private static int pow(int i, int j) {
		int ans = 1;
		while (j > 0) {
			if ((j & 1) == 1)
				ans *= ((j & 1) * i);
			i *= i;
			j >>= 1;
		}
		return ans;
	}

	/* program to find magic number */
	static int magic(int n) {
		int i = 1;
		int ans = 0;
		while (n > 0) {
			ans += ((n & 1) * (int) Math.pow(5, i++));
			n = n >> 1;
		}
		return ans;
	}

	/* program to check if number is a valid power of 2 */
	static boolean isPowerOf2(int n) {
		if (n == 0)
			return false;
		if ((n & n - 1) == 0)
			return true;
		return false;
	}
}
